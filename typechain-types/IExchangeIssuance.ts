/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IExchangeIssuanceInterface extends utils.Interface {
  functions: {
    "issueExactSetFromETH(address,uint256)": FunctionFragment;
    "issueExactSetFromToken(address,address,uint256,uint256)": FunctionFragment;
    "issueSetForExactETH(address,uint256)": FunctionFragment;
    "issueSetForExactToken(address,address,uint256,uint256)": FunctionFragment;
    "redeemExactSetForETH(address,uint256,uint256)": FunctionFragment;
    "redeemExactSetForToken(address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "issueExactSetFromETH"
      | "issueExactSetFromToken"
      | "issueSetForExactETH"
      | "issueSetForExactToken"
      | "redeemExactSetForETH"
      | "redeemExactSetForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "issueExactSetFromETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueExactSetFromToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueSetForExactETH",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "issueSetForExactToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactSetForETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemExactSetForToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "issueExactSetFromETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueExactSetFromToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueSetForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueSetForExactToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactSetForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemExactSetForToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchangeIssuance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeIssuanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    issueExactSetFromETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issueExactSetFromToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _maxAmountInputToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issueSetForExactETH(
      _setToken: PromiseOrValue<string>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issueSetForExactToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountInput: PromiseOrValue<BigNumberish>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemExactSetForETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minEthOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemExactSetForToken(
      _setToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minOutputReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  issueExactSetFromETH(
    _setToken: PromiseOrValue<string>,
    _amountSetToken: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issueExactSetFromToken(
    _setToken: PromiseOrValue<string>,
    _inputToken: PromiseOrValue<string>,
    _amountSetToken: PromiseOrValue<BigNumberish>,
    _maxAmountInputToken: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issueSetForExactETH(
    _setToken: PromiseOrValue<string>,
    _minSetReceive: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issueSetForExactToken(
    _setToken: PromiseOrValue<string>,
    _inputToken: PromiseOrValue<string>,
    _amountInput: PromiseOrValue<BigNumberish>,
    _minSetReceive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemExactSetForETH(
    _setToken: PromiseOrValue<string>,
    _amountSetToken: PromiseOrValue<BigNumberish>,
    _minEthOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemExactSetForToken(
    _setToken: PromiseOrValue<string>,
    _outputToken: PromiseOrValue<string>,
    _amountSetToken: PromiseOrValue<BigNumberish>,
    _minOutputReceive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    issueExactSetFromETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueExactSetFromToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _maxAmountInputToken: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueSetForExactETH(
      _setToken: PromiseOrValue<string>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueSetForExactToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountInput: PromiseOrValue<BigNumberish>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactSetForETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minEthOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemExactSetForToken(
      _setToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minOutputReceive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    issueExactSetFromETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issueExactSetFromToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _maxAmountInputToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issueSetForExactETH(
      _setToken: PromiseOrValue<string>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issueSetForExactToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountInput: PromiseOrValue<BigNumberish>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemExactSetForETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minEthOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemExactSetForToken(
      _setToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minOutputReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    issueExactSetFromETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issueExactSetFromToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _maxAmountInputToken: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issueSetForExactETH(
      _setToken: PromiseOrValue<string>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issueSetForExactToken(
      _setToken: PromiseOrValue<string>,
      _inputToken: PromiseOrValue<string>,
      _amountInput: PromiseOrValue<BigNumberish>,
      _minSetReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactSetForETH(
      _setToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minEthOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemExactSetForToken(
      _setToken: PromiseOrValue<string>,
      _outputToken: PromiseOrValue<string>,
      _amountSetToken: PromiseOrValue<BigNumberish>,
      _minOutputReceive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
