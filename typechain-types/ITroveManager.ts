/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export interface ITroveManagerInterface extends utils.Interface {
  functions: {
    "checkRecoveryMode(uint256)": FunctionFragment;
    "closeTrove(address)": FunctionFragment;
    "getBorrowingRateWithDecay()": FunctionFragment;
    "getCurrentICR(address,uint256)": FunctionFragment;
    "getEntireDebtAndColl(address)": FunctionFragment;
    "getTCR(uint256)": FunctionFragment;
    "getTroveStatus(address)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidateTroves(uint256)": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "redeemCollateral(uint256,address,address,address,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkRecoveryMode"
      | "closeTrove"
      | "getBorrowingRateWithDecay"
      | "getCurrentICR"
      | "getEntireDebtAndColl"
      | "getTCR"
      | "getTroveStatus"
      | "liquidate"
      | "liquidateTroves"
      | "priceFeed"
      | "redeemCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkRecoveryMode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRateWithDecay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentICR",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireDebtAndColl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTCR",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateTroves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireDebtAndColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITroveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITroveManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkRecoveryMode(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    closeTrove(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentICR(
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntireDebtAndColl(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingLUSDDebtReward: BigNumber;
        pendingETHReward: BigNumber;
      }
    >;

    getTCR(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveStatus(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateTroves(
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    redeemCollateral(
      _LUSDAmount: PromiseOrValue<BigNumberish>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      _partialRedemptionHintNICR: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkRecoveryMode(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  closeTrove(
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentICR(
    _borrower: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireDebtAndColl(
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      pendingLUSDDebtReward: BigNumber;
      pendingETHReward: BigNumber;
    }
  >;

  getTCR(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveStatus(
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateTroves(
    _n: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  redeemCollateral(
    _LUSDAmount: PromiseOrValue<BigNumberish>,
    _firstRedemptionHint: PromiseOrValue<string>,
    _upperPartialRedemptionHint: PromiseOrValue<string>,
    _lowerPartialRedemptionHint: PromiseOrValue<string>,
    _partialRedemptionHintNICR: PromiseOrValue<BigNumberish>,
    _maxIterations: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkRecoveryMode(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeTrove(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingLUSDDebtReward: BigNumber;
        pendingETHReward: BigNumber;
      }
    >;

    getTCR(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateTroves(
      _n: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    redeemCollateral(
      _LUSDAmount: PromiseOrValue<BigNumberish>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      _partialRedemptionHintNICR: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkRecoveryMode(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeTrove(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBorrowingRateWithDecay(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentICR(
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTCR(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateTroves(
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    redeemCollateral(
      _LUSDAmount: PromiseOrValue<BigNumberish>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      _partialRedemptionHintNICR: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkRecoveryMode(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowingRateWithDecay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentICR(
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireDebtAndColl(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTCR(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveStatus(
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTroves(
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemCollateral(
      _LUSDAmount: PromiseOrValue<BigNumberish>,
      _firstRedemptionHint: PromiseOrValue<string>,
      _upperPartialRedemptionHint: PromiseOrValue<string>,
      _lowerPartialRedemptionHint: PromiseOrValue<string>,
      _partialRedemptionHintNICR: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
