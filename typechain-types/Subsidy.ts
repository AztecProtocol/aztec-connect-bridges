/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export declare namespace ISubsidy {
  export type SubsidyStruct = {
    available: PromiseOrValue<BigNumberish>;
    gasUsage: PromiseOrValue<BigNumberish>;
    minGasPerMinute: PromiseOrValue<BigNumberish>;
    gasPerMinute: PromiseOrValue<BigNumberish>;
    lastUpdated: PromiseOrValue<BigNumberish>;
  };

  export type SubsidyStructOutput = [
    BigNumber,
    number,
    number,
    number,
    number
  ] & {
    available: BigNumber;
    gasUsage: number;
    minGasPerMinute: number;
    gasPerMinute: number;
    lastUpdated: number;
  };
}

export interface SubsidyInterface extends utils.Interface {
  functions: {
    "MIN_SUBSIDY_VALUE()": FunctionFragment;
    "beneficiaries(address)": FunctionFragment;
    "claimSubsidy(uint256,address)": FunctionFragment;
    "claimableAmount(address)": FunctionFragment;
    "getAccumulatedSubsidyAmount(address,uint256)": FunctionFragment;
    "getSubsidy(address,uint256)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "registerBeneficiary(address)": FunctionFragment;
    "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)": FunctionFragment;
    "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])": FunctionFragment;
    "subsidies(address,uint256)": FunctionFragment;
    "subsidize(address,uint256,uint32)": FunctionFragment;
    "topUp(address,uint256)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_SUBSIDY_VALUE"
      | "beneficiaries"
      | "claimSubsidy"
      | "claimableAmount"
      | "getAccumulatedSubsidyAmount"
      | "getSubsidy"
      | "isRegistered"
      | "registerBeneficiary"
      | "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"
      | "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"
      | "subsidies"
      | "subsidize"
      | "topUp"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_SUBSIDY_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSubsidy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedSubsidyAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubsidy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subsidies",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subsidize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "topUp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_SUBSIDY_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSubsidy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedSubsidyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSubsidy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subsidies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subsidize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "topUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BeneficiaryRegistered(address)": EventFragment;
    "Subsidized(address,uint256,uint128,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subsidized"): EventFragment;
}

export interface BeneficiaryRegisteredEventObject {
  beneficiary: string;
}
export type BeneficiaryRegisteredEvent = TypedEvent<
  [string],
  BeneficiaryRegisteredEventObject
>;

export type BeneficiaryRegisteredEventFilter =
  TypedEventFilter<BeneficiaryRegisteredEvent>;

export interface SubsidizedEventObject {
  bridge: string;
  criteria: BigNumber;
  available: BigNumber;
  gasPerMinute: number;
}
export type SubsidizedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  SubsidizedEventObject
>;

export type SubsidizedEventFilter = TypedEventFilter<SubsidizedEvent>;

export interface Subsidy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubsidyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_SUBSIDY_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimable: BigNumber; registered: boolean }
    >;

    claimSubsidy(
      _criteria: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableAmount(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccumulatedSubsidyAmount(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubsidy(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ISubsidy.SubsidyStructOutput]>;

    isRegistered(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"(
      _criteria: PromiseOrValue<BigNumberish>,
      _gasUsage: PromiseOrValue<BigNumberish>,
      _minGasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"(
      _criteria: PromiseOrValue<BigNumberish>[],
      _gasUsage: PromiseOrValue<BigNumberish>[],
      _minGasPerMinute: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subsidies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        available: BigNumber;
        gasUsage: number;
        minGasPerMinute: number;
        gasPerMinute: number;
        lastUpdated: number;
      }
    >;

    subsidize(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      _gasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topUp(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_SUBSIDY_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiaries(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { claimable: BigNumber; registered: boolean }
  >;

  claimSubsidy(
    _criteria: PromiseOrValue<BigNumberish>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableAmount(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccumulatedSubsidyAmount(
    _bridge: PromiseOrValue<string>,
    _criteria: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubsidy(
    _bridge: PromiseOrValue<string>,
    _criteria: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ISubsidy.SubsidyStructOutput>;

  isRegistered(
    _beneficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerBeneficiary(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"(
    _criteria: PromiseOrValue<BigNumberish>,
    _gasUsage: PromiseOrValue<BigNumberish>,
    _minGasPerMinute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"(
    _criteria: PromiseOrValue<BigNumberish>[],
    _gasUsage: PromiseOrValue<BigNumberish>[],
    _minGasPerMinute: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subsidies(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number] & {
      available: BigNumber;
      gasUsage: number;
      minGasPerMinute: number;
      gasPerMinute: number;
      lastUpdated: number;
    }
  >;

  subsidize(
    _bridge: PromiseOrValue<string>,
    _criteria: PromiseOrValue<BigNumberish>,
    _gasPerMinute: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topUp(
    _bridge: PromiseOrValue<string>,
    _criteria: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_SUBSIDY_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { claimable: BigNumber; registered: boolean }
    >;

    claimSubsidy(
      _criteria: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableAmount(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccumulatedSubsidyAmount(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubsidy(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ISubsidy.SubsidyStructOutput>;

    isRegistered(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"(
      _criteria: PromiseOrValue<BigNumberish>,
      _gasUsage: PromiseOrValue<BigNumberish>,
      _minGasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"(
      _criteria: PromiseOrValue<BigNumberish>[],
      _gasUsage: PromiseOrValue<BigNumberish>[],
      _minGasPerMinute: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    subsidies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number] & {
        available: BigNumber;
        gasUsage: number;
        minGasPerMinute: number;
        gasPerMinute: number;
        lastUpdated: number;
      }
    >;

    subsidize(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      _gasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    topUp(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BeneficiaryRegistered(address)"(
      beneficiary?: PromiseOrValue<string> | null
    ): BeneficiaryRegisteredEventFilter;
    BeneficiaryRegistered(
      beneficiary?: PromiseOrValue<string> | null
    ): BeneficiaryRegisteredEventFilter;

    "Subsidized(address,uint256,uint128,uint32)"(
      bridge?: PromiseOrValue<string> | null,
      criteria?: PromiseOrValue<BigNumberish> | null,
      available?: null,
      gasPerMinute?: null
    ): SubsidizedEventFilter;
    Subsidized(
      bridge?: PromiseOrValue<string> | null,
      criteria?: PromiseOrValue<BigNumberish> | null,
      available?: null,
      gasPerMinute?: null
    ): SubsidizedEventFilter;
  };

  estimateGas: {
    MIN_SUBSIDY_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSubsidy(
      _criteria: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableAmount(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccumulatedSubsidyAmount(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubsidy(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"(
      _criteria: PromiseOrValue<BigNumberish>,
      _gasUsage: PromiseOrValue<BigNumberish>,
      _minGasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"(
      _criteria: PromiseOrValue<BigNumberish>[],
      _gasUsage: PromiseOrValue<BigNumberish>[],
      _minGasPerMinute: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subsidies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subsidize(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      _gasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topUp(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_SUBSIDY_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimSubsidy(
      _criteria: PromiseOrValue<BigNumberish>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableAmount(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccumulatedSubsidyAmount(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubsidy(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBeneficiary(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGasUsageAndMinGasPerMinute(uint256,uint32,uint32)"(
      _criteria: PromiseOrValue<BigNumberish>,
      _gasUsage: PromiseOrValue<BigNumberish>,
      _minGasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setGasUsageAndMinGasPerMinute(uint256[],uint32[],uint32[])"(
      _criteria: PromiseOrValue<BigNumberish>[],
      _gasUsage: PromiseOrValue<BigNumberish>[],
      _minGasPerMinute: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subsidies(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subsidize(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      _gasPerMinute: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topUp(
      _bridge: PromiseOrValue<string>,
      _criteria: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
