/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AztecTypes {
  export type AztecAssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    erc20Address: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AztecAssetStructOutput = [BigNumber, string, number] & {
    id: BigNumber;
    erc20Address: string;
    assetType: number;
  };
}

export interface LidoBridgeInterface extends utils.Interface {
  functions: {
    "CURVE_POOL()": FunctionFragment;
    "LIDO()": FunctionFragment;
    "REFERRAL()": FunctionFragment;
    "ROLLUP_PROCESSOR()": FunctionFragment;
    "SUBSIDY()": FunctionFragment;
    "WRAPPED_STETH()": FunctionFragment;
    "computeCriteria((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64)": FunctionFragment;
    "convert((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint256,uint64,address)": FunctionFragment;
    "finalise((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CURVE_POOL"
      | "LIDO"
      | "REFERRAL"
      | "ROLLUP_PROCESSOR"
      | "SUBSIDY"
      | "WRAPPED_STETH"
      | "computeCriteria"
      | "convert"
      | "finalise"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CURVE_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LIDO", values?: undefined): string;
  encodeFunctionData(functionFragment: "REFERRAL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLLUP_PROCESSOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SUBSIDY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPED_STETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeCriteria",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalise",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "CURVE_POOL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LIDO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REFERRAL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLLUP_PROCESSOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SUBSIDY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPED_STETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalise", data: BytesLike): Result;

  events: {};
}

export interface LidoBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LidoBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CURVE_POOL(overrides?: CallOverrides): Promise<[string]>;

    LIDO(overrides?: CallOverrides): Promise<[string]>;

    REFERRAL(overrides?: CallOverrides): Promise<[string]>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<[string]>;

    SUBSIDY(overrides?: CallOverrides): Promise<[string]>;

    WRAPPED_STETH(overrides?: CallOverrides): Promise<[string]>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      _inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CURVE_POOL(overrides?: CallOverrides): Promise<string>;

  LIDO(overrides?: CallOverrides): Promise<string>;

  REFERRAL(overrides?: CallOverrides): Promise<string>;

  ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

  SUBSIDY(overrides?: CallOverrides): Promise<string>;

  WRAPPED_STETH(overrides?: CallOverrides): Promise<string>;

  computeCriteria(
    arg0: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    arg2: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    _inputAssetA: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    _outputAssetA: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    _totalInputValue: PromiseOrValue<BigNumberish>,
    _interactionNonce: PromiseOrValue<BigNumberish>,
    arg6: PromiseOrValue<BigNumberish>,
    arg7: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalise(
    arg0: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    arg2: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    arg4: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CURVE_POOL(overrides?: CallOverrides): Promise<string>;

    LIDO(overrides?: CallOverrides): Promise<string>;

    REFERRAL(overrides?: CallOverrides): Promise<string>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

    SUBSIDY(overrides?: CallOverrides): Promise<string>;

    WRAPPED_STETH(overrides?: CallOverrides): Promise<string>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      _inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        isAsync: boolean;
      }
    >;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;
  };

  filters: {};

  estimateGas: {
    CURVE_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    LIDO(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL(overrides?: CallOverrides): Promise<BigNumber>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    WRAPPED_STETH(overrides?: CallOverrides): Promise<BigNumber>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      _inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CURVE_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIDO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REFERRAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUBSIDY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WRAPPED_STETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      _inputAssetA: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      arg6: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
