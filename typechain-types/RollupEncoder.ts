/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export declare namespace AztecTypes {
  export type AztecAssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    erc20Address: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AztecAssetStructOutput = [BigNumber, string, number] & {
    id: BigNumber;
    erc20Address: string;
    assetType: number;
  };
}

export interface RollupEncoderInterface extends utils.Interface {
  functions: {
    "ASYNC_BRIDGE_PROCESSED_EVENT_SIG()": FunctionFragment;
    "BRIDGE_PROCESSED_EVENT_SIG()": FunctionFragment;
    "IS_SCRIPT()": FunctionFragment;
    "NUMBER_OF_ASSETS()": FunctionFragment;
    "ROLLUP_PROCESSOR()": FunctionFragment;
    "ROLLUP_PROVIDER()": FunctionFragment;
    "VIRTUAL_ASSET_ID_FLAG()": FunctionFragment;
    "VIRTUAL_ASSET_ID_FLAG_SHIFT()": FunctionFragment;
    "computeDefiInteractionHash(uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "defiBridgeProcessedStructsLength()": FunctionFragment;
    "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)": FunctionFragment;
    "defiInteractionL2(uint256,uint256)": FunctionFragment;
    "defiInteractionLength()": FunctionFragment;
    "depositL2(uint256,uint256,uint256,uint256,bytes32)": FunctionFragment;
    "depositL2(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositsL2Length()": FunctionFragment;
    "encodeBridgeCallData(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256)": FunctionFragment;
    "getAssetId(address)": FunctionFragment;
    "getNextNonce()": FunctionFragment;
    "getRealAztecAsset(address)": FunctionFragment;
    "isSupportedAsset(address)": FunctionFragment;
    "nextRollupId()": FunctionFragment;
    "prepProcessorAndGetRollupBlock()": FunctionFragment;
    "processRollup()": FunctionFragment;
    "processRollupAndGetBridgeResult()": FunctionFragment;
    "processRollupFail(bytes4)": FunctionFragment;
    "processRollupFail(bytes)": FunctionFragment;
    "registerEventToBeChecked(uint256,uint256,uint256,uint256,uint256,bool,bytes)": FunctionFragment;
    "rollupBeneficiary()": FunctionFragment;
    "setMockVerifierCall(bool)": FunctionFragment;
    "setNextRollupId(uint256)": FunctionFragment;
    "setRollupBeneficiary(address)": FunctionFragment;
    "tokenToId(address)": FunctionFragment;
    "withdrawL2(uint256,uint256,address)": FunctionFragment;
    "withdrawalsL2Length()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ASYNC_BRIDGE_PROCESSED_EVENT_SIG"
      | "BRIDGE_PROCESSED_EVENT_SIG"
      | "IS_SCRIPT"
      | "NUMBER_OF_ASSETS"
      | "ROLLUP_PROCESSOR"
      | "ROLLUP_PROVIDER"
      | "VIRTUAL_ASSET_ID_FLAG"
      | "VIRTUAL_ASSET_ID_FLAG_SHIFT"
      | "computeDefiInteractionHash"
      | "defiBridgeProcessedStructsLength"
      | "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"
      | "defiInteractionL2(uint256,uint256)"
      | "defiInteractionLength"
      | "depositL2(uint256,uint256,uint256,uint256,bytes32)"
      | "depositL2(uint256,uint256,uint256,uint256)"
      | "depositsL2Length"
      | "encodeBridgeCallData"
      | "getAssetId"
      | "getNextNonce"
      | "getRealAztecAsset"
      | "isSupportedAsset"
      | "nextRollupId"
      | "prepProcessorAndGetRollupBlock"
      | "processRollup"
      | "processRollupAndGetBridgeResult"
      | "processRollupFail(bytes4)"
      | "processRollupFail(bytes)"
      | "registerEventToBeChecked"
      | "rollupBeneficiary"
      | "setMockVerifierCall"
      | "setNextRollupId"
      | "setRollupBeneficiary"
      | "tokenToId"
      | "withdrawL2"
      | "withdrawalsL2Length"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ASYNC_BRIDGE_PROCESSED_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_PROCESSED_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NUMBER_OF_ASSETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLLUP_PROCESSOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLLUP_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VIRTUAL_ASSET_ID_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VIRTUAL_ASSET_ID_FLAG_SHIFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeDefiInteractionHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defiBridgeProcessedStructsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defiInteractionL2(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defiInteractionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositL2(uint256,uint256,uint256,uint256,bytes32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositL2(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsL2Length",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBridgeCallData",
    values: [
      PromiseOrValue<BigNumberish>,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRealAztecAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRollupId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepProcessorAndGetRollupBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processRollup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processRollupAndGetBridgeResult",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processRollupFail(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processRollupFail(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEventToBeChecked",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMockVerifierCall",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextRollupId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRollupBeneficiary",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawL2",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsL2Length",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ASYNC_BRIDGE_PROCESSED_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_PROCESSED_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NUMBER_OF_ASSETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLLUP_PROCESSOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLLUP_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VIRTUAL_ASSET_ID_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VIRTUAL_ASSET_ID_FLAG_SHIFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeDefiInteractionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiBridgeProcessedStructsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiInteractionL2(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiInteractionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositL2(uint256,uint256,uint256,uint256,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositL2(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsL2Length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeBridgeCallData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealAztecAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRollupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepProcessorAndGetRollupBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRollupAndGetBridgeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRollupFail(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRollupFail(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEventToBeChecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMockVerifierCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextRollupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRollupBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenToId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawL2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsL2Length",
    data: BytesLike
  ): Result;

  events: {
    "AsyncDefiBridgeProcessed(uint256,uint256,uint256)": EventFragment;
    "DefiBridgeProcessed(uint256,uint256,uint256,uint256,uint256,bool,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AsyncDefiBridgeProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefiBridgeProcessed"): EventFragment;
}

export interface AsyncDefiBridgeProcessedEventObject {
  encodedBridgeCallData: BigNumber;
  nonce: BigNumber;
  totalInputValue: BigNumber;
}
export type AsyncDefiBridgeProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AsyncDefiBridgeProcessedEventObject
>;

export type AsyncDefiBridgeProcessedEventFilter =
  TypedEventFilter<AsyncDefiBridgeProcessedEvent>;

export interface DefiBridgeProcessedEventObject {
  encodedBridgeCallData: BigNumber;
  nonce: BigNumber;
  totalInputValue: BigNumber;
  totalOutputValueA: BigNumber;
  totalOutputValueB: BigNumber;
  result: boolean;
  errorReason: string;
}
export type DefiBridgeProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean, string],
  DefiBridgeProcessedEventObject
>;

export type DefiBridgeProcessedEventFilter =
  TypedEventFilter<DefiBridgeProcessedEvent>;

export interface RollupEncoder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupEncoderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ASYNC_BRIDGE_PROCESSED_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<[string]>;

    BRIDGE_PROCESSED_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    NUMBER_OF_ASSETS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<[string]>;

    ROLLUP_PROVIDER(overrides?: CallOverrides): Promise<[string]>;

    VIRTUAL_ASSET_ID_FLAG(overrides?: CallOverrides): Promise<[BigNumber]>;

    VIRTUAL_ASSET_ID_FLAG_SHIFT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeDefiInteractionHash(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _outputValueA: PromiseOrValue<BigNumberish>,
      _outputValueB: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    defiBridgeProcessedStructsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "defiInteractionL2(uint256,uint256)"(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defiInteractionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "depositL2(uint256,uint256,uint256,uint256,bytes32)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      _proofHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositL2(uint256,uint256,uint256,uint256)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositsL2Length(overrides?: CallOverrides): Promise<[BigNumber]>;

    encodeBridgeCallData(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { encodedBridgeCallData: BigNumber }>;

    getAssetId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRealAztecAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AztecTypes.AztecAssetStructOutput]>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nextRollupId(overrides?: CallOverrides): Promise<[BigNumber]>;

    prepProcessorAndGetRollupBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processRollup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processRollupAndGetBridgeResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "processRollupFail(bytes4)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "processRollupFail(bytes)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerEventToBeChecked(
      encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      totalInputValue: PromiseOrValue<BigNumberish>,
      outputValueA: PromiseOrValue<BigNumberish>,
      outputValueB: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      errorReason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollupBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    setMockVerifierCall(
      _mockVerifierCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextRollupId(
      _nextRollupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRollupBeneficiary(
      _rollupBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenToId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawL2(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalsL2Length(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ASYNC_BRIDGE_PROCESSED_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  BRIDGE_PROCESSED_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  NUMBER_OF_ASSETS(overrides?: CallOverrides): Promise<BigNumber>;

  ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

  ROLLUP_PROVIDER(overrides?: CallOverrides): Promise<string>;

  VIRTUAL_ASSET_ID_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

  VIRTUAL_ASSET_ID_FLAG_SHIFT(overrides?: CallOverrides): Promise<BigNumber>;

  computeDefiInteractionHash(
    _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
    _interactionNonce: PromiseOrValue<BigNumberish>,
    _totalInputValue: PromiseOrValue<BigNumberish>,
    _outputValueA: PromiseOrValue<BigNumberish>,
    _outputValueB: PromiseOrValue<BigNumberish>,
    _success: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  defiBridgeProcessedStructsLength(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"(
    _bridgeAddressId: PromiseOrValue<BigNumberish>,
    _inputAssetA: AztecTypes.AztecAssetStruct,
    _inputAssetB: AztecTypes.AztecAssetStruct,
    _outputAssetA: AztecTypes.AztecAssetStruct,
    _outputAssetB: AztecTypes.AztecAssetStruct,
    _auxData: PromiseOrValue<BigNumberish>,
    _totalInputValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "defiInteractionL2(uint256,uint256)"(
    _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
    _totalInputValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defiInteractionLength(overrides?: CallOverrides): Promise<BigNumber>;

  "depositL2(uint256,uint256,uint256,uint256,bytes32)"(
    _assetId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _privKey: PromiseOrValue<BigNumberish>,
    _proofHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositL2(uint256,uint256,uint256,uint256)"(
    _assetId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _privKey: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositsL2Length(overrides?: CallOverrides): Promise<BigNumber>;

  encodeBridgeCallData(
    _bridgeAddressId: PromiseOrValue<BigNumberish>,
    _inputAssetA: AztecTypes.AztecAssetStruct,
    _inputAssetB: AztecTypes.AztecAssetStruct,
    _outputAssetA: AztecTypes.AztecAssetStruct,
    _outputAssetB: AztecTypes.AztecAssetStruct,
    _auxData: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAssetId(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getRealAztecAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AztecTypes.AztecAssetStructOutput>;

  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nextRollupId(overrides?: CallOverrides): Promise<BigNumber>;

  prepProcessorAndGetRollupBlock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processRollup(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processRollupAndGetBridgeResult(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "processRollupFail(bytes4)"(
    _err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "processRollupFail(bytes)"(
    _err: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerEventToBeChecked(
    encodedBridgeCallData: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    totalInputValue: PromiseOrValue<BigNumberish>,
    outputValueA: PromiseOrValue<BigNumberish>,
    outputValueB: PromiseOrValue<BigNumberish>,
    result: PromiseOrValue<boolean>,
    errorReason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollupBeneficiary(overrides?: CallOverrides): Promise<string>;

  setMockVerifierCall(
    _mockVerifierCall: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextRollupId(
    _nextRollupId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRollupBeneficiary(
    _rollupBeneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenToId(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawL2(
    _assetId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalsL2Length(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ASYNC_BRIDGE_PROCESSED_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<string>;

    BRIDGE_PROCESSED_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    NUMBER_OF_ASSETS(overrides?: CallOverrides): Promise<BigNumber>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

    ROLLUP_PROVIDER(overrides?: CallOverrides): Promise<string>;

    VIRTUAL_ASSET_ID_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    VIRTUAL_ASSET_ID_FLAG_SHIFT(overrides?: CallOverrides): Promise<BigNumber>;

    computeDefiInteractionHash(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _outputValueA: PromiseOrValue<BigNumberish>,
      _outputValueB: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    defiBridgeProcessedStructsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "defiInteractionL2(uint256,uint256)"(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defiInteractionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "depositL2(uint256,uint256,uint256,uint256,bytes32)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      _proofHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositL2(uint256,uint256,uint256,uint256)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositsL2Length(overrides?: CallOverrides): Promise<BigNumber>;

    encodeBridgeCallData(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRealAztecAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AztecTypes.AztecAssetStructOutput>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nextRollupId(overrides?: CallOverrides): Promise<BigNumber>;

    prepProcessorAndGetRollupBlock(
      overrides?: CallOverrides
    ): Promise<[string, string] & { proofData: string; signatures: string }>;

    processRollup(overrides?: CallOverrides): Promise<void>;

    processRollupAndGetBridgeResult(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        isAsync: boolean;
      }
    >;

    "processRollupFail(bytes4)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "processRollupFail(bytes)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerEventToBeChecked(
      encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      totalInputValue: PromiseOrValue<BigNumberish>,
      outputValueA: PromiseOrValue<BigNumberish>,
      outputValueB: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      errorReason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    rollupBeneficiary(overrides?: CallOverrides): Promise<string>;

    setMockVerifierCall(
      _mockVerifierCall: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextRollupId(
      _nextRollupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRollupBeneficiary(
      _rollupBeneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenToId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawL2(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalsL2Length(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AsyncDefiBridgeProcessed(uint256,uint256,uint256)"(
      encodedBridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null
    ): AsyncDefiBridgeProcessedEventFilter;
    AsyncDefiBridgeProcessed(
      encodedBridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null
    ): AsyncDefiBridgeProcessedEventFilter;

    "DefiBridgeProcessed(uint256,uint256,uint256,uint256,uint256,bool,bytes)"(
      encodedBridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      totalOutputValueA?: null,
      totalOutputValueB?: null,
      result?: null,
      errorReason?: null
    ): DefiBridgeProcessedEventFilter;
    DefiBridgeProcessed(
      encodedBridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      totalOutputValueA?: null,
      totalOutputValueB?: null,
      result?: null,
      errorReason?: null
    ): DefiBridgeProcessedEventFilter;
  };

  estimateGas: {
    ASYNC_BRIDGE_PROCESSED_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BRIDGE_PROCESSED_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    NUMBER_OF_ASSETS(overrides?: CallOverrides): Promise<BigNumber>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<BigNumber>;

    ROLLUP_PROVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    VIRTUAL_ASSET_ID_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    VIRTUAL_ASSET_ID_FLAG_SHIFT(overrides?: CallOverrides): Promise<BigNumber>;

    computeDefiInteractionHash(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _outputValueA: PromiseOrValue<BigNumberish>,
      _outputValueB: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defiBridgeProcessedStructsLength(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "defiInteractionL2(uint256,uint256)"(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defiInteractionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "depositL2(uint256,uint256,uint256,uint256,bytes32)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      _proofHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositL2(uint256,uint256,uint256,uint256)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositsL2Length(overrides?: CallOverrides): Promise<BigNumber>;

    encodeBridgeCallData(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getRealAztecAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRollupId(overrides?: CallOverrides): Promise<BigNumber>;

    prepProcessorAndGetRollupBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processRollup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processRollupAndGetBridgeResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "processRollupFail(bytes4)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "processRollupFail(bytes)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerEventToBeChecked(
      encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      totalInputValue: PromiseOrValue<BigNumberish>,
      outputValueA: PromiseOrValue<BigNumberish>,
      outputValueB: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      errorReason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollupBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    setMockVerifierCall(
      _mockVerifierCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextRollupId(
      _nextRollupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRollupBeneficiary(
      _rollupBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenToId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawL2(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalsL2Length(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ASYNC_BRIDGE_PROCESSED_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BRIDGE_PROCESSED_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUMBER_OF_ASSETS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLLUP_PROVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VIRTUAL_ASSET_ID_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VIRTUAL_ASSET_ID_FLAG_SHIFT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeDefiInteractionHash(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _interactionNonce: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      _outputValueA: PromiseOrValue<BigNumberish>,
      _outputValueB: PromiseOrValue<BigNumberish>,
      _success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defiBridgeProcessedStructsLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defiInteractionL2(uint256,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64,uint256)"(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "defiInteractionL2(uint256,uint256)"(
      _encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      _totalInputValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defiInteractionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositL2(uint256,uint256,uint256,uint256,bytes32)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      _proofHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositL2(uint256,uint256,uint256,uint256)"(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _privKey: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositsL2Length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encodeBridgeCallData(
      _bridgeAddressId: PromiseOrValue<BigNumberish>,
      _inputAssetA: AztecTypes.AztecAssetStruct,
      _inputAssetB: AztecTypes.AztecAssetStruct,
      _outputAssetA: AztecTypes.AztecAssetStruct,
      _outputAssetB: AztecTypes.AztecAssetStruct,
      _auxData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRealAztecAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRollupId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepProcessorAndGetRollupBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processRollup(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processRollupAndGetBridgeResult(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "processRollupFail(bytes4)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "processRollupFail(bytes)"(
      _err: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerEventToBeChecked(
      encodedBridgeCallData: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      totalInputValue: PromiseOrValue<BigNumberish>,
      outputValueA: PromiseOrValue<BigNumberish>,
      outputValueB: PromiseOrValue<BigNumberish>,
      result: PromiseOrValue<boolean>,
      errorReason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollupBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMockVerifierCall(
      _mockVerifierCall: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextRollupId(
      _nextRollupId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRollupBeneficiary(
      _rollupBeneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenToId(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawL2(
      _assetId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsL2Length(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
