/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AztecTypes {
  export type AztecAssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    erc20Address: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AztecAssetStructOutput = [BigNumber, string, number] & {
    id: BigNumber;
    erc20Address: string;
    assetType: number;
  };
}

export interface ElementBridgeInterface extends utils.Interface {
  functions: {
    "ROLLUP_PROCESSOR()": FunctionFragment;
    "SUBSIDY()": FunctionFragment;
    "assetToExpirys(address,uint256)": FunctionFragment;
    "computeCriteria((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint64)": FunctionFragment;
    "convert((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint256,uint64,address)": FunctionFragment;
    "finalise((uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint64)": FunctionFragment;
    "getAssetExpiries(address)": FunctionFragment;
    "getTrancheDeploymentBlockNumber(uint256)": FunctionFragment;
    "hashAssetAndExpiry(address,uint64)": FunctionFragment;
    "interactions(uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "registerConvergentPoolAddress(address,address,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLLUP_PROCESSOR"
      | "SUBSIDY"
      | "assetToExpirys"
      | "computeCriteria"
      | "convert"
      | "finalise"
      | "getAssetExpiries"
      | "getTrancheDeploymentBlockNumber"
      | "hashAssetAndExpiry"
      | "interactions"
      | "pools"
      | "registerConvergentPoolAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLLUP_PROCESSOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SUBSIDY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetToExpirys",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCriteria",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalise",
    values: [
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetExpiries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheDeploymentBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAssetAndExpiry",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerConvergentPoolAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLLUP_PROCESSOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SUBSIDY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetToExpirys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetExpiries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheDeploymentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashAssetAndExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerConvergentPoolAddress",
    data: BytesLike
  ): Result;

  events: {
    "LogConvert(uint256,uint256,int64)": EventFragment;
    "LogFinalise(uint256,bool,string,int64)": EventFragment;
    "LogPoolAdded(address,address,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogConvert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFinalise"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAdded"): EventFragment;
}

export interface LogConvertEventObject {
  nonce: BigNumber;
  totalInputValue: BigNumber;
  gasUsed: BigNumber;
}
export type LogConvertEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogConvertEventObject
>;

export type LogConvertEventFilter = TypedEventFilter<LogConvertEvent>;

export interface LogFinaliseEventObject {
  nonce: BigNumber;
  success: boolean;
  message: string;
  gasUsed: BigNumber;
}
export type LogFinaliseEvent = TypedEvent<
  [BigNumber, boolean, string, BigNumber],
  LogFinaliseEventObject
>;

export type LogFinaliseEventFilter = TypedEventFilter<LogFinaliseEvent>;

export interface LogPoolAddedEventObject {
  poolAddress: string;
  wrappedPositionAddress: string;
  expiry: BigNumber;
}
export type LogPoolAddedEvent = TypedEvent<
  [string, string, BigNumber],
  LogPoolAddedEventObject
>;

export type LogPoolAddedEventFilter = TypedEventFilter<LogPoolAddedEvent>;

export interface ElementBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElementBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<[string]>;

    SUBSIDY(overrides?: CallOverrides): Promise<[string]>;

    assetToExpirys(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxData: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      interactionNonce: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetExpiries(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { assetExpiries: BigNumber[] }>;

    getTrancheDeploymentBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    hashAssetAndExpiry(
      asset: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hashValue: BigNumber }>;

    interactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        quantityPT: BigNumber;
        trancheAddress: string;
        expiry: BigNumber;
        finalised: boolean;
        failed: boolean;
      }
    >;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        poolId: string;
        trancheAddress: string;
        poolAddress: string;
        wrappedPositionAddress: string;
      }
    >;

    registerConvergentPoolAddress(
      _convergentPool: PromiseOrValue<string>,
      _wrappedPosition: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

  SUBSIDY(overrides?: CallOverrides): Promise<string>;

  assetToExpirys(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeCriteria(
    arg0: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    arg2: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    inputAssetA: AztecTypes.AztecAssetStruct,
    inputAssetB: AztecTypes.AztecAssetStruct,
    outputAssetA: AztecTypes.AztecAssetStruct,
    outputAssetB: AztecTypes.AztecAssetStruct,
    totalInputValue: PromiseOrValue<BigNumberish>,
    interactionNonce: PromiseOrValue<BigNumberish>,
    auxData: PromiseOrValue<BigNumberish>,
    arg7: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalise(
    arg0: AztecTypes.AztecAssetStruct,
    arg1: AztecTypes.AztecAssetStruct,
    outputAssetA: AztecTypes.AztecAssetStruct,
    arg3: AztecTypes.AztecAssetStruct,
    interactionNonce: PromiseOrValue<BigNumberish>,
    arg5: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetExpiries(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTrancheDeploymentBlockNumber(
    interactionNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashAssetAndExpiry(
    asset: PromiseOrValue<string>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, boolean, boolean] & {
      quantityPT: BigNumber;
      trancheAddress: string;
      expiry: BigNumber;
      finalised: boolean;
      failed: boolean;
    }
  >;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      poolId: string;
      trancheAddress: string;
      poolAddress: string;
      wrappedPositionAddress: string;
    }
  >;

  registerConvergentPoolAddress(
    _convergentPool: PromiseOrValue<string>,
    _wrappedPosition: PromiseOrValue<string>,
    _expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<string>;

    SUBSIDY(overrides?: CallOverrides): Promise<string>;

    assetToExpirys(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxData: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        isAsync: boolean;
      }
    >;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      interactionNonce: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        interactionCompleted: boolean;
      }
    >;

    getAssetExpiries(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTrancheDeploymentBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashAssetAndExpiry(
      asset: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, boolean, boolean] & {
        quantityPT: BigNumber;
        trancheAddress: string;
        expiry: BigNumber;
        finalised: boolean;
        failed: boolean;
      }
    >;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        poolId: string;
        trancheAddress: string;
        poolAddress: string;
        wrappedPositionAddress: string;
      }
    >;

    registerConvergentPoolAddress(
      _convergentPool: PromiseOrValue<string>,
      _wrappedPosition: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogConvert(uint256,uint256,int64)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      gasUsed?: null
    ): LogConvertEventFilter;
    LogConvert(
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      gasUsed?: null
    ): LogConvertEventFilter;

    "LogFinalise(uint256,bool,string,int64)"(
      nonce?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      message?: null,
      gasUsed?: null
    ): LogFinaliseEventFilter;
    LogFinalise(
      nonce?: PromiseOrValue<BigNumberish> | null,
      success?: null,
      message?: null,
      gasUsed?: null
    ): LogFinaliseEventFilter;

    "LogPoolAdded(address,address,uint64)"(
      poolAddress?: null,
      wrappedPositionAddress?: null,
      expiry?: null
    ): LogPoolAddedEventFilter;
    LogPoolAdded(
      poolAddress?: null,
      wrappedPositionAddress?: null,
      expiry?: null
    ): LogPoolAddedEventFilter;
  };

  estimateGas: {
    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSIDY(overrides?: CallOverrides): Promise<BigNumber>;

    assetToExpirys(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxData: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      interactionNonce: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetExpiries(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrancheDeploymentBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashAssetAndExpiry(
      asset: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerConvergentPoolAddress(
      _convergentPool: PromiseOrValue<string>,
      _wrappedPosition: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLLUP_PROCESSOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUBSIDY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetToExpirys(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCriteria(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      arg2: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxData: PromiseOrValue<BigNumberish>,
      arg7: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalise(
      arg0: AztecTypes.AztecAssetStruct,
      arg1: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      arg3: AztecTypes.AztecAssetStruct,
      interactionNonce: PromiseOrValue<BigNumberish>,
      arg5: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetExpiries(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrancheDeploymentBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashAssetAndExpiry(
      asset: PromiseOrValue<string>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerConvergentPoolAddress(
      _convergentPool: PromiseOrValue<string>,
      _wrappedPosition: PromiseOrValue<string>,
      _expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
