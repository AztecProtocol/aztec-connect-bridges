/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IStableMaster {
  export type SLPDataStruct = {
    lastBlockUpdated: PromiseOrValue<BigNumberish>;
    lockedInterests: PromiseOrValue<BigNumberish>;
    maxInterestsDistributed: PromiseOrValue<BigNumberish>;
    feesAside: PromiseOrValue<BigNumberish>;
    slippageFee: PromiseOrValue<BigNumberish>;
    feesForSLPs: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    interestsForSLPs: PromiseOrValue<BigNumberish>;
  };

  export type SLPDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lastBlockUpdated: BigNumber;
    lockedInterests: BigNumber;
    maxInterestsDistributed: BigNumber;
    feesAside: BigNumber;
    slippageFee: BigNumber;
    feesForSLPs: BigNumber;
    slippage: BigNumber;
    interestsForSLPs: BigNumber;
  };

  export type MintBurnDataStruct = {
    xFeeMint: PromiseOrValue<BigNumberish>[];
    yFeeMint: PromiseOrValue<BigNumberish>[];
    xFeeBurn: PromiseOrValue<BigNumberish>[];
    yFeeBurn: PromiseOrValue<BigNumberish>[];
    targetHAHedge: PromiseOrValue<BigNumberish>;
    bonusMalusMint: PromiseOrValue<BigNumberish>;
    bonusMalusBurn: PromiseOrValue<BigNumberish>;
    capOnStableMinted: PromiseOrValue<BigNumberish>;
  };

  export type MintBurnDataStructOutput = [
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    xFeeMint: BigNumber[];
    yFeeMint: BigNumber[];
    xFeeBurn: BigNumber[];
    yFeeBurn: BigNumber[];
    targetHAHedge: BigNumber;
    bonusMalusMint: BigNumber;
    bonusMalusBurn: BigNumber;
    capOnStableMinted: BigNumber;
  };
}

export interface IStableMasterInterface extends utils.Interface {
  functions: {
    "agToken()": FunctionFragment;
    "collateralMap(address)": FunctionFragment;
    "deposit(uint256,address,address)": FunctionFragment;
    "withdraw(uint256,address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "agToken" | "collateralMap" | "deposit" | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "agToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "agToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IStableMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStableMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateralMap(
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        IStableMaster.SLPDataStructOutput,
        IStableMaster.MintBurnDataStructOutput
      ] & {
        token: string;
        sanToken: string;
        perpetualManager: string;
        oracle: string;
        stocksUsers: BigNumber;
        sanRate: BigNumber;
        collatBase: BigNumber;
        slpData: IStableMaster.SLPDataStructOutput;
        feeData: IStableMaster.MintBurnDataStructOutput;
      }
    >;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      burner: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  agToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateralMap(
    poolManager: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      IStableMaster.SLPDataStructOutput,
      IStableMaster.MintBurnDataStructOutput
    ] & {
      token: string;
      sanToken: string;
      perpetualManager: string;
      oracle: string;
      stocksUsers: BigNumber;
      sanRate: BigNumber;
      collatBase: BigNumber;
      slpData: IStableMaster.SLPDataStructOutput;
      feeData: IStableMaster.MintBurnDataStructOutput;
    }
  >;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    burner: PromiseOrValue<string>,
    dest: PromiseOrValue<string>,
    poolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agToken(overrides?: CallOverrides): Promise<string>;

    collateralMap(
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        IStableMaster.SLPDataStructOutput,
        IStableMaster.MintBurnDataStructOutput
      ] & {
        token: string;
        sanToken: string;
        perpetualManager: string;
        oracle: string;
        stocksUsers: BigNumber;
        sanRate: BigNumber;
        collatBase: BigNumber;
        slpData: IStableMaster.SLPDataStructOutput;
        feeData: IStableMaster.MintBurnDataStructOutput;
      }
    >;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      burner: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    agToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateralMap(
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      burner: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateralMap(
      poolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      burner: PromiseOrValue<string>,
      dest: PromiseOrValue<string>,
      poolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
