/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { BiDCABridge, BiDCABridgeInterface } from "../BiDCABridge";

const _abi = [
  {
    inputs: [],
    name: "FeeTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInputA",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidOutputA",
    type: "error",
  },
  {
    inputs: [],
    name: "MissingImplementation",
    type: "error",
  },
  {
    inputs: [],
    name: "NoDeposits",
    type: "error",
  },
  {
    inputs: [],
    name: "PositionAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "ASSET_A",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ASSET_B",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_DIVISOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROLLUP_PROCESSOR",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUBSIDY",
    outputs: [
      {
        internalType: "contract ISubsidy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TICK_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "computeCriteria",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "_inputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "_outputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_inputValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_interactionNonce",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "_numTicks",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "convert",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "dcas",
    outputs: [
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "start",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "end",
        type: "uint32",
      },
      {
        internalType: "bool",
        name: "aToB",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_priceAToB",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_roundUp",
        type: "bool",
      },
    ],
    name: "denominateAssetAInB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_priceAToB",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_roundUp",
        type: "bool",
      },
    ],
    name: "denominateAssetBInA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "earliestTickWithAvailableA",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "earliestTickWithAvailableB",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "_outputAssetA",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "erc20Address",
            type: "address",
          },
          {
            internalType: "enum AztecTypes.AztecAssetType",
            name: "assetType",
            type: "uint8",
          },
        ],
        internalType: "struct AztecTypes.AztecAsset",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_interactionNonce",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "finalise",
    outputs: [
      {
        internalType: "uint256",
        name: "outputValueA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "interactionComplete",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "getAccumulated",
    outputs: [
      {
        internalType: "uint256",
        name: "accumulated",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "ready",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAvailable",
    outputs: [
      {
        internalType: "uint256",
        name: "availableA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "availableB",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256",
      },
    ],
    name: "getDCA",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "start",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "end",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "aToB",
            type: "bool",
          },
        ],
        internalType: "struct BiDCABridge.DCA",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tick",
        type: "uint256",
      },
    ],
    name: "getTick",
    outputs: [
      {
        components: [
          {
            internalType: "uint120",
            name: "availableA",
            type: "uint120",
          },
          {
            internalType: "uint120",
            name: "availableB",
            type: "uint120",
          },
          {
            internalType: "uint16",
            name: "poke",
            type: "uint16",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "sold",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "bought",
                type: "uint128",
              },
            ],
            internalType: "struct BiDCABridge.SubTick",
            name: "aToBSubTick",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "sold",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "bought",
                type: "uint128",
              },
            ],
            internalType: "struct BiDCABridge.SubTick",
            name: "bToASubTick",
            type: "tuple",
          },
          {
            internalType: "uint128",
            name: "priceOfAInB",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "priceTime",
            type: "uint32",
          },
        ],
        internalType: "struct BiDCABridge.Tick",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_numTicks",
        type: "uint256",
      },
    ],
    name: "pokeNextTicks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_startTick",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numTicks",
        type: "uint256",
      },
    ],
    name: "pokeTicks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_offerA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_upperTick",
        type: "uint256",
      },
    ],
    name: "rebalanceAndFill",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_offerA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerB",
        type: "uint256",
      },
    ],
    name: "rebalanceAndFill",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint120",
        name: "availableA",
        type: "uint120",
      },
      {
        internalType: "uint120",
        name: "availableB",
        type: "uint120",
      },
      {
        internalType: "uint16",
        name: "poke",
        type: "uint16",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "sold",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "bought",
            type: "uint128",
          },
        ],
        internalType: "struct BiDCABridge.SubTick",
        name: "aToBSubTick",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "sold",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "bought",
            type: "uint128",
          },
        ],
        internalType: "struct BiDCABridge.SubTick",
        name: "bToASubTick",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "priceOfAInB",
        type: "uint128",
      },
      {
        internalType: "uint32",
        name: "priceTime",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class BiDCABridge__factory {
  static readonly abi = _abi;
  static createInterface(): BiDCABridgeInterface {
    return new utils.Interface(_abi) as BiDCABridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BiDCABridge {
    return new Contract(address, _abi, signerOrProvider) as BiDCABridge;
  }
}
