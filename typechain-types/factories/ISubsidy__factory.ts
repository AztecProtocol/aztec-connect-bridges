/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISubsidy, ISubsidyInterface } from "../ISubsidy";

const _abi = [
  {
    inputs: [],
    name: "MIN_SUBSIDY_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "claimSubsidy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "claimableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
    ],
    name: "getAccumulatedSubsidyAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
    ],
    name: "getSubsidy",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "available",
            type: "uint128",
          },
          {
            internalType: "uint32",
            name: "gasUsage",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "minGasPerMinute",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "gasPerMinute",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "lastUpdated",
            type: "uint32",
          },
        ],
        internalType: "struct ISubsidy.Subsidy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "isRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "registerBeneficiary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_gasUsage",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "_minGasPerMinute",
        type: "uint32",
      },
    ],
    name: "setGasUsageAndMinGasPerMinute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_criteria",
        type: "uint256[]",
      },
      {
        internalType: "uint32[]",
        name: "_gasUsage",
        type: "uint32[]",
      },
      {
        internalType: "uint32[]",
        name: "_minGasPerMinute",
        type: "uint32[]",
      },
    ],
    name: "setGasUsageAndMinGasPerMinute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_gasPerMinute",
        type: "uint32",
      },
    ],
    name: "subsidize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_criteria",
        type: "uint256",
      },
    ],
    name: "topUp",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ISubsidy__factory {
  static readonly abi = _abi;
  static createInterface(): ISubsidyInterface {
    return new utils.Interface(_abi) as ISubsidyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISubsidy {
    return new Contract(address, _abi, signerOrProvider) as ISubsidy;
  }
}
