/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common.js";
import type { DataProvider, DataProviderInterface } from "../DataProvider.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rollupProcessor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ROLLUP_PROCESSOR",
    outputs: [
      {
        internalType: "contract IRollupProcessor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUBSIDY",
    outputs: [
      {
        internalType: "contract ISubsidy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "addAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_assetIds",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_assetTags",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "_bridgeAddressIds",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_bridgeTags",
        type: "string[]",
      },
    ],
    name: "addAssetsAndBridges",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeAddressId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "addBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeCallData",
        type: "uint256",
      },
    ],
    name: "getAccumulatedSubsidyAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeAddressId",
        type: "uint256",
      },
    ],
    name: "getBridge",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "getBridge",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridges",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405162001ce638038062001ce68339810160408190526100319161009b565b61003a3361004b565b6001600160a01b03166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ad57600080fd5b81516001600160a01b03811681146100c457600080fd5b9392505050565b608051611bd5620001116000396000818161020401528181610311015281816106a50152818161082d01528181610ad501528181610d5e01526111bf0152611bd56000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806379a7453911610097578063cd5286d011610066578063cd5286d014610239578063eac8f5b81461024c578063f2fde38b1461025f578063f3c475fb1461027257600080fd5b806379a74539146101c15780638da5cb5b146101e1578063ae9467b5146101ff578063b5ba64a21461022657600080fd5b80635a548336116100d35780635a548336146101515780636508156e1461016457806367e4ac2c146101a4578063715018a6146101b957600080fd5b806312db9b58146100fa5780632dce0a6b14610127578063427391c21461013c575b600080fd5b61010d6101083660046113f9565b610285565b604080519283526020830191909152015b60405180910390f35b61012f61069f565b60405161011e91906114d3565b61014f61014a36600461165f565b6107f3565b005b61014f61015f3660046117b5565b610994565b61017f73abc30e831b5cc173a9ed5941714a7845c909e7fa81565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011e565b6101ac610acf565b60405161011e9190611862565b61014f610c1c565b6101d46101cf3660046113f9565b610c30565b60405161011e91906118d5565b60005473ffffffffffffffffffffffffffffffffffffffff1661017f565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b61014f61023436600461165f565b610d24565b6101d46102473660046118ef565b610ebe565b6101d461025a3660046113f9565b610fa7565b61014f61026d366004611946565b611015565b6101d46102803660046118ef565b6110cc565b6000806102d76040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b63ffffffff84168082526040517fe0d16c3200000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d16c3290602401602060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190611963565b73ffffffffffffffffffffffffffffffffffffffff1660208083019190915284901c633fffffff90811660408301819052603e86901c82166060840152605c86901c82166080840152607a86901c90911660a0830152609885901c63ffffffff169060b886901c67ffffffffffffffff169060009061040f90611106565b905061043260408051606081018252600080825260208201819052909182015290565b836001166001141561044e5761044b8560600151611106565b90505b600061045d8660800151611106565b905061048060408051606081018252600080825260208201819052909182015290565b856002166002141561049c576104998760a00151611106565b90505b600080886020015173ffffffffffffffffffffffffffffffffffffffff1663dbeacd5460e01b878787878c6040516024016104db9594939291906119eb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516105649190611a3d565b600060405180830381855afa9150503d806000811461059f576040519150601f19603f3d011682016040523d82523d6000602084013e6105a4565b606091505b5091509150816105c2575060009b8c9b509950505050505050505050565b6000818060200190518101906105d89190611a59565b60208b01516040517f73be8bbe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260248101829052909150819073abc30e831b5cc173a9ed5941714a7845c909e7fa906373be8bbe90604401602060405180830381865afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c9190611a59565b9b509b5050505050505050505050915091565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a8d1eae76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107329190611a59565b905060008167ffffffffffffffff81111561074f5761074f611553565b60405190808252806020026020018201604052801561079c57816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161076d5790505b50905060015b8281116107ec576107b281610c30565b826107be600184611aa1565b815181106107ce576107ce611ab8565b602002602001018190525080806107e490611ae7565b9150506107a2565b5092915050565b6107fb61126a565b6040517f60a8b18a000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906360a8b18a90602401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611963565b90506000826040516020016108c29190611b20565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152828252805160209182012060008181526004835283812089905560608501845273ffffffffffffffffffffffffffffffffffffffff87811686528386018a81528686018a81528b84526003865295909220865181547fffffffffffffffffffffffff0000000000000000000000000000000000000000169216919091178155905160018201559251805191955061098b926002850192910190611360565b50505050505050565b825184511415806109a757508051825114155b15610a13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420696e707574206c656e67746873000000000000000000000060448201526064015b60405180910390fd5b60005b8351811015610a6d57610a5b858281518110610a3457610a34611ab8565b6020026020010151858381518110610a4e57610a4e611ab8565b60200260200101516107f3565b80610a6581611ae7565b915050610a16565b5060005b8151811015610ac857610ab6838281518110610a8f57610a8f611ab8565b6020026020010151838381518110610aa957610aa9611ab8565b6020026020010151610d24565b80610ac081611ae7565b915050610a71565b5050505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c0fd22b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b629190611a59565b90506000610b71826001611b33565b67ffffffffffffffff811115610b8957610b89611553565b604051908082528060200260200182016040528015610bd657816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610ba75790505b50905060005b8281116107ec57610bec81610fa7565b828281518110610bfe57610bfe611ab8565b60200260200101819052508080610c1490611ae7565b915050610bdc565b610c2461126a565b610c2e60006112eb565b565b60408051606080820183526000808352602080840182905283850183905285825260018082529185902085519384018652805473ffffffffffffffffffffffffffffffffffffffff1684529182015490830152600281018054939492939192840191610c9b90611b4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc790611b4b565b8015610d145780601f10610ce957610100808354040283529160200191610d14565b820191906000526020600020905b815481529060010190602001808311610cf757829003601f168201915b5050505050815250509050919050565b610d2c61126a565b6040517fe0d16c32000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d16c3290602401602060405180830381865afa158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611963565b9050600082604051602001610df39190611b20565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282528051602091820120600081815260028084528482208a905560608601855273ffffffffffffffffffffffffffffffffffffffff88811687528487018b81528787018b81528c8552600180885297909420885181547fffffffffffffffffffffffff000000000000000000000000000000000000000016931692909217825551958101959095559051805192965061098b9391850192910190611360565b60408051606080820183526000808352602083015291810191909152600360000160006003600101600085604051602001610ef99190611b20565b6040516020818303038152906040528051906020012081526020019081526020016000205481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054610c9b90611b4b565b604080516060808201835260008083526020808401829052838501839052858252600381529084902084519283018552805473ffffffffffffffffffffffffffffffffffffffff168352600181015491830191909152600281018054939492939192840191610c9b90611b4b565b61101d61126a565b73ffffffffffffffffffffffffffffffffffffffff81166110c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a0a565b6110c9816112eb565b50565b604080516060808201835260008083526020830152918101919091526001600001600060018001600085604051602001610ef99190611b20565b61112760408051606081018252600080825260208201819052909182015290565b6320000000821061116457604051806060016040528063200000008461114d9190611aa1565b81526000602082015260400160035b905292915050565b811561124c576040805160608101825283815290517f60a8b18a00000000000000000000000000000000000000000000000000000000815260048101849052602082019073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906360a8b18a90602401602060405180830381865afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a9190611963565b73ffffffffffffffffffffffffffffffffffffffff168152602001600261115c565b6040805160608101825260008082526020820152908101600161115c565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a0a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461136c90611b4b565b90600052602060002090601f01602090048101928261138e57600085556113d4565b82601f106113a757805160ff19168380011785556113d4565b828001600101855582156113d4579182015b828111156113d45782518255916020019190600101906113b9565b506113e09291506113e4565b5090565b5b808211156113e057600081556001016113e5565b60006020828403121561140b57600080fd5b5035919050565b60005b8381101561142d578181015183820152602001611415565b8381111561143c576000848401525b50505050565b6000815180845261145a816020860160208601611412565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260006040820151606060408501526114cb6060850182611442565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611546577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261153485835161148c565b945092850192908501906001016114fa565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115c9576115c9611553565b604052919050565b600082601f8301126115e257600080fd5b813567ffffffffffffffff8111156115fc576115fc611553565b61162d60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611582565b81815284602083860101111561164257600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561167257600080fd5b82359150602083013567ffffffffffffffff81111561169057600080fd5b61169c858286016115d1565b9150509250929050565b600067ffffffffffffffff8211156116c0576116c0611553565b5060051b60200190565b600082601f8301126116db57600080fd5b813560206116f06116eb836116a6565b611582565b82815260059290921b8401810191818101908684111561170f57600080fd5b8286015b8481101561172a5780358352918301918301611713565b509695505050505050565b600082601f83011261174657600080fd5b813560206117566116eb836116a6565b82815260059290921b8401810191818101908684111561177557600080fd5b8286015b8481101561172a57803567ffffffffffffffff8111156117995760008081fd5b6117a78986838b01016115d1565b845250918301918301611779565b600080600080608085870312156117cb57600080fd5b843567ffffffffffffffff808211156117e357600080fd5b6117ef888389016116ca565b9550602087013591508082111561180557600080fd5b61181188838901611735565b9450604087013591508082111561182757600080fd5b611833888389016116ca565b9350606087013591508082111561184957600080fd5b5061185687828801611735565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611546577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526118c385835161148c565b94509285019290850190600101611889565b6020815260006118e8602083018461148c565b9392505050565b60006020828403121561190157600080fd5b813567ffffffffffffffff81111561191857600080fd5b6114cb848285016115d1565b73ffffffffffffffffffffffffffffffffffffffff811681146110c957600080fd5b60006020828403121561195857600080fd5b81356118e881611924565b60006020828403121561197557600080fd5b81516118e881611924565b8051825273ffffffffffffffffffffffffffffffffffffffff60208201511660208301526040810151600481106119e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b806040840152505050565b6101a081016119fa8288611980565b611a076060830187611980565b611a1460c0830186611980565b611a22610120830185611980565b67ffffffffffffffff83166101808301529695505050505050565b60008251611a4f818460208701611412565b9190910192915050565b600060208284031215611a6b57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611ab357611ab3611a72565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b1957611b19611a72565b5060010190565b6020815260006118e86020830184611442565b60008219821115611b4657611b46611a72565b500190565b600181811c90821680611b5f57607f821691505b60208210811415611b99577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea2646970667358221220bc48746fc450ab2543ca6fc198900c5d23f98b6823232b5d2c5f3fcb83d4274464736f6c634300080a0033";

type DataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataProvider__factory extends ContractFactory {
  constructor(...args: DataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rollupProcessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataProvider> {
    return super.deploy(
      _rollupProcessor,
      overrides || {}
    ) as Promise<DataProvider>;
  }
  override getDeployTransaction(
    _rollupProcessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rollupProcessor, overrides || {});
  }
  override attach(address: string): DataProvider {
    return super.attach(address) as DataProvider;
  }
  override connect(signer: Signer): DataProvider__factory {
    return super.connect(signer) as DataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataProviderInterface {
    return new utils.Interface(_abi) as DataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataProvider {
    return new Contract(address, _abi, signerOrProvider) as DataProvider;
  }
}
