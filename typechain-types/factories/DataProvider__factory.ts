/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common.js";
import type { DataProvider, DataProviderInterface } from "../DataProvider.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rollupProcessor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "ROLLUP_PROCESSOR",
    outputs: [
      {
        internalType: "contract IRollupProcessor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SUBSIDY",
    outputs: [
      {
        internalType: "contract ISubsidy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "addAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_assetIds",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_assetTags",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "_bridgeAddressIds",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_bridgeTags",
        type: "string[]",
      },
    ],
    name: "addAssetsAndBridges",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeAddressId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "addBridge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeCallData",
        type: "uint256",
      },
    ],
    name: "getAccumulatedSubsidyAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    name: "getAsset",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "assetAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "assetId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.AssetData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_bridgeAddressId",
        type: "uint256",
      },
    ],
    name: "getBridge",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tag",
        type: "string",
      },
    ],
    name: "getBridge",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBridges",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "bridgeAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bridgeAddressId",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "label",
            type: "string",
          },
        ],
        internalType: "struct DataProvider.BridgeData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405162001d4338038062001d438339810160408190526100319161009b565b61003a3361004b565b6001600160a01b03166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ad57600080fd5b81516001600160a01b03811681146100c457600080fd5b9392505050565b608051611c32620001116000396000818161020a01528181610319015281816106c70152818161084f01528181610af701528181610d8001526111e10152611c326000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806379a7453911610097578063cd5286d011610066578063cd5286d01461023f578063eac8f5b814610252578063f2fde38b14610265578063f3c475fb1461027857600080fd5b806379a74539146101c75780638da5cb5b146101e7578063ae9467b514610205578063b5ba64a21461022c57600080fd5b80635a548336116100d35780635a548336146101575780636508156e1461016a57806367e4ac2c146101aa578063715018a6146101bf57600080fd5b806312db9b58146100fa5780632dce0a6b1461012d578063427391c214610142575b600080fd5b61010d61010836600461141b565b61028b565b604080519384526020840192909252908201526060015b60405180910390f35b6101356106c1565b60405161012491906114f5565b610155610150366004611681565b610815565b005b6101556101653660046117d7565b6109b6565b61018573abc30e831b5cc173a9ed5941714a7845c909e7fa81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b6101b2610af1565b6040516101249190611884565b610155610c3e565b6101da6101d536600461141b565b610c52565b60405161012491906118f7565b60005473ffffffffffffffffffffffffffffffffffffffff16610185565b6101857f000000000000000000000000000000000000000000000000000000000000000081565b61015561023a366004611681565b610d46565b6101da61024d366004611911565b610ee0565b6101da61026036600461141b565b610fc9565b610155610273366004611968565b611037565b6101da610286366004611911565b6110ee565b60008060006102df6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b63ffffffff85168082526040517fe0d16c3200000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d16c3290602401602060405180830381865afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190611985565b73ffffffffffffffffffffffffffffffffffffffff1660208083019190915285901c633fffffff90811660408301819052603e87901c82166060840152605c87901c82166080840152607a87901c90911660a0830152609886901c63ffffffff169060b887901c67ffffffffffffffff169060009061041790611128565b905061043a60408051606081018252600080825260208201819052909182015290565b8360011660011415610456576104538560600151611128565b90505b60006104658660800151611128565b905061048860408051606081018252600080825260208201819052909182015290565b85600216600214156104a4576104a18760a00151611128565b90505b600080886020015173ffffffffffffffffffffffffffffffffffffffff1663dbeacd5460e01b878787878c6040516024016104e3959493929190611a0d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161056c9190611a5f565b600060405180830381855afa9150503d80600081146105a7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ac565b606091505b5091509150816105cf5760008060009b509b509b505050505050505050506106ba565b6000818060200190518101906105e59190611a7b565b60208b01516040517f73be8bbe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810182905290915060009073abc30e831b5cc173a9ed5941714a7845c909e7fa906373be8bbe90604401602060405180830381865afa158015610676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069a9190611a7b565b905081816106a84882611ac3565b9d509d509d5050505050505050505050505b9193909250565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a8d1eae76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190611a7b565b905060008167ffffffffffffffff81111561077157610771611575565b6040519080825280602002602001820160405280156107be57816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161078f5790505b50905060015b82811161080e576107d481610c52565b826107e0600184611afe565b815181106107f0576107f0611b15565b6020026020010181905250808061080690611b44565b9150506107c4565b5092915050565b61081d61128c565b6040517f60a8b18a000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906360a8b18a90602401602060405180830381865afa1580156108ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cf9190611985565b90506000826040516020016108e49190611b7d565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152828252805160209182012060008181526004835283812089905560608501845273ffffffffffffffffffffffffffffffffffffffff87811686528386018a81528686018a81528b84526003865295909220865181547fffffffffffffffffffffffff000000000000000000000000000000000000000016921691909117815590516001820155925180519195506109ad926002850192910190611382565b50505050505050565b825184511415806109c957508051825114155b15610a35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420696e707574206c656e67746873000000000000000000000060448201526064015b60405180910390fd5b60005b8351811015610a8f57610a7d858281518110610a5657610a56611b15565b6020026020010151858381518110610a7057610a70611b15565b6020026020010151610815565b80610a8781611b44565b915050610a38565b5060005b8151811015610aea57610ad8838281518110610ab157610ab1611b15565b6020026020010151838381518110610acb57610acb611b15565b6020026020010151610d46565b80610ae281611b44565b915050610a93565b5050505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c0fd22b76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190611a7b565b90506000610b93826001611b90565b67ffffffffffffffff811115610bab57610bab611575565b604051908082528060200260200182016040528015610bf857816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610bc95790505b50905060005b82811161080e57610c0e81610fc9565b828281518110610c2057610c20611b15565b60200260200101819052508080610c3690611b44565b915050610bfe565b610c4661128c565b610c50600061130d565b565b60408051606080820183526000808352602080840182905283850183905285825260018082529185902085519384018652805473ffffffffffffffffffffffffffffffffffffffff1684529182015490830152600281018054939492939192840191610cbd90611ba8565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce990611ba8565b8015610d365780601f10610d0b57610100808354040283529160200191610d36565b820191906000526020600020905b815481529060010190602001808311610d1957829003601f168201915b5050505050815250509050919050565b610d4e61128c565b6040517fe0d16c32000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d16c3290602401602060405180830381865afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e009190611985565b9050600082604051602001610e159190611b7d565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181528282528051602091820120600081815260028084528482208a905560608601855273ffffffffffffffffffffffffffffffffffffffff88811687528487018b81528787018b81528c8552600180885297909420885181547fffffffffffffffffffffffff00000000000000000000000000000000000000001693169290921782555195810195909555905180519296506109ad9391850192910190611382565b60408051606080820183526000808352602083015291810191909152600360000160006003600101600085604051602001610f1b9190611b7d565b6040516020818303038152906040528051906020012081526020019081526020016000205481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282018054610cbd90611ba8565b604080516060808201835260008083526020808401829052838501839052858252600381529084902084519283018552805473ffffffffffffffffffffffffffffffffffffffff168352600181015491830191909152600281018054939492939192840191610cbd90611ba8565b61103f61128c565b73ffffffffffffffffffffffffffffffffffffffff81166110e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a2c565b6110eb8161130d565b50565b604080516060808201835260008083526020830152918101919091526001600001600060018001600085604051602001610f1b9190611b7d565b61114960408051606081018252600080825260208201819052909182015290565b6320000000821061118657604051806060016040528063200000008461116f9190611afe565b81526000602082015260400160035b905292915050565b811561126e576040805160608101825283815290517f60a8b18a00000000000000000000000000000000000000000000000000000000815260048101849052602082019073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906360a8b18a90602401602060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190611985565b73ffffffffffffffffffffffffffffffffffffffff168152602001600261117e565b6040805160608101825260008082526020820152908101600161117e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a2c565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805461138e90611ba8565b90600052602060002090601f0160209004810192826113b057600085556113f6565b82601f106113c957805160ff19168380011785556113f6565b828001600101855582156113f6579182015b828111156113f65782518255916020019190600101906113db565b50611402929150611406565b5090565b5b808211156114025760008155600101611407565b60006020828403121561142d57600080fd5b5035919050565b60005b8381101561144f578181015183820152602001611437565b8381111561145e576000848401525b50505050565b6000815180845261147c816020860160208601611434565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260006040820151606060408501526114ed6060850182611464565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611568577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526115568583516114ae565b9450928501929085019060010161151c565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115eb576115eb611575565b604052919050565b600082601f83011261160457600080fd5b813567ffffffffffffffff81111561161e5761161e611575565b61164f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016115a4565b81815284602083860101111561166457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561169457600080fd5b82359150602083013567ffffffffffffffff8111156116b257600080fd5b6116be858286016115f3565b9150509250929050565b600067ffffffffffffffff8211156116e2576116e2611575565b5060051b60200190565b600082601f8301126116fd57600080fd5b8135602061171261170d836116c8565b6115a4565b82815260059290921b8401810191818101908684111561173157600080fd5b8286015b8481101561174c5780358352918301918301611735565b509695505050505050565b600082601f83011261176857600080fd5b8135602061177861170d836116c8565b82815260059290921b8401810191818101908684111561179757600080fd5b8286015b8481101561174c57803567ffffffffffffffff8111156117bb5760008081fd5b6117c98986838b01016115f3565b84525091830191830161179b565b600080600080608085870312156117ed57600080fd5b843567ffffffffffffffff8082111561180557600080fd5b611811888389016116ec565b9550602087013591508082111561182757600080fd5b61183388838901611757565b9450604087013591508082111561184957600080fd5b611855888389016116ec565b9350606087013591508082111561186b57600080fd5b5061187887828801611757565b91505092959194509250565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611568577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526118e58583516114ae565b945092850192908501906001016118ab565b60208152600061190a60208301846114ae565b9392505050565b60006020828403121561192357600080fd5b813567ffffffffffffffff81111561193a57600080fd5b6114ed848285016115f3565b73ffffffffffffffffffffffffffffffffffffffff811681146110eb57600080fd5b60006020828403121561197a57600080fd5b813561190a81611946565b60006020828403121561199757600080fd5b815161190a81611946565b8051825273ffffffffffffffffffffffffffffffffffffffff6020820151166020830152604081015160048110611a02577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b806040840152505050565b6101a08101611a1c82886119a2565b611a2960608301876119a2565b611a3660c08301866119a2565b611a446101208301856119a2565b67ffffffffffffffff83166101808301529695505050505050565b60008251611a71818460208701611434565b9190910192915050565b600060208284031215611a8d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611af9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611b1057611b10611a94565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b7657611b76611a94565b5060010190565b60208152600061190a6020830184611464565b60008219821115611ba357611ba3611a94565b500190565b600181811c90821680611bbc57607f821691505b60208210811415611bf6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212203acdebc2ad3332d0b9325c715c04c3245d4f50018813dd38147f71bdb83efc6364736f6c634300080a0033";

type DataProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataProvider__factory extends ContractFactory {
  constructor(...args: DataProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _rollupProcessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataProvider> {
    return super.deploy(
      _rollupProcessor,
      overrides || {}
    ) as Promise<DataProvider>;
  }
  override getDeployTransaction(
    _rollupProcessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_rollupProcessor, overrides || {});
  }
  override attach(address: string): DataProvider {
    return super.attach(address) as DataProvider;
  }
  override connect(signer: Signer): DataProvider__factory {
    return super.connect(signer) as DataProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataProviderInterface {
    return new utils.Interface(_abi) as DataProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataProvider {
    return new Contract(address, _abi, signerOrProvider) as DataProvider;
  }
}
