/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common.js";
import type {
  HeapTestContract,
  HeapTestContractInterface,
} from "../HeapTestContract.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_initialSize",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "HEAP_EMPTY",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_value",
        type: "uint64",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "min",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_value",
        type: "uint64",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "size",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109da3803806109da83398101604081905261002f916100b2565b61004781600061004d60201b61010f1790919060201c565b506100df565b60005b8163ffffffff168110156100a357600180840180548083018255600091825260209091206004820401805460086003909316929092026101000a6001600160401b03028019909216909117905501610050565b5050805463ffffffff19169055565b6000602082840312156100c457600080fd5b815163ffffffff811681146100d857600080fd5b9392505050565b6108ec806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806399cc7d051161005057806399cc7d051461009d578063a4ece52c146100b0578063f8897945146100b857600080fd5b80637b8811961461006c578063949d225d14610081575b600080fd5b61007f61007a3660046107f1565b6100d9565b005b60005463ffffffff166040519081526020015b60405180910390f35b61007f6100ab3660046107f1565b6100ec565b61007f6100f7565b6100c0610103565b60405167ffffffffffffffff9091168152602001610094565b6100e4600082610190565b50565b905090565b6100e460008261028e565b610101600061038a565b565b60006100e76000610610565b60005b8163ffffffff1681101561016657600180840180548083018255600091825260209091206004820401805460086003909316929092026101000a67ffffffffffffffff028019909216909117905501610112565b505080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000169055565b8154600183015463ffffffff909116908114156101ee576001838101805491820181556000908152602090206004820401805460039092166008026101000a67ffffffffffffffff8181021990931692851602919091179055610246565b81836001018263ffffffff168154811061020a5761020a610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b82547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000166001820163ffffffff9081169190911784556102899084908316610698565b505050565b815460009063ffffffff165b8063ffffffff16821080156102f557508267ffffffffffffffff168460010183815481106102ca576102ca610822565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1614155b156103055781600101915061029a565b8063ffffffff168214156103195750505050565b811561037b57600084600101838154811061033657610336610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555061037b8483610698565b6103848461038a565b50505050565b805463ffffffff168061039b575050565b6000600183016103aa83610851565b92508263ffffffff16815481106103c3576103c3610822565b60009182526020822060048204015460039091166008026101000a900467ffffffffffffffff16915080805b8463ffffffff168310156105d6575050600181811b908101906002018284600063ffffffff88168510801561046c57508167ffffffffffffffff1689600101868154811061043f5761043f610822565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16915081105b15610478578492508091505b8763ffffffff16841080156104d257508167ffffffffffffffff168960010185815481106104a8576104a8610822565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16105b156104db578392505b8583141561053c57818960010187815481106104f9576104f9610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050506105d6565b88600101838154811061055157610551610822565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1689600101878154811061059057610590610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508295505050506103ef565b505083547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff93909316929092179092555050565b805460009063ffffffff16610651576040517f9622ab6100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160010160008154811061066757610667610822565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff169050919050565b60008260010182815481106106af576106af610822565b60009182526020822060048204015460039091166008026101000a900467ffffffffffffffff1691505b821561079a5760006001808503901c91508267ffffffffffffffff1685600101838154811061070a5761070a610822565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1691508111610740575061079a565b8085600101858154811061075657610756610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550819350506106d9565b818460010184815481106107b0576107b0610822565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b60006020828403121561080357600080fd5b813567ffffffffffffffff8116811461081b57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600063ffffffff82168061088e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019291505056fea2646970667358221220c6b931f65a37373e7c6ecd4bb24c8a7cf03fc383e66d89b44a7976f9859a168664736f6c634300080a0033";

type HeapTestContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeapTestContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeapTestContract__factory extends ContractFactory {
  constructor(...args: HeapTestContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _initialSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HeapTestContract> {
    return super.deploy(
      _initialSize,
      overrides || {}
    ) as Promise<HeapTestContract>;
  }
  override getDeployTransaction(
    _initialSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_initialSize, overrides || {});
  }
  override attach(address: string): HeapTestContract {
    return super.attach(address) as HeapTestContract;
  }
  override connect(signer: Signer): HeapTestContract__factory {
    return super.connect(signer) as HeapTestContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeapTestContractInterface {
    return new utils.Interface(_abi) as HeapTestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HeapTestContract {
    return new Contract(address, _abi, signerOrProvider) as HeapTestContract;
  }
}
