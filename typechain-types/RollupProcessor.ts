/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common.js";

export declare namespace AztecTypes {
  export type AztecAssetStruct = {
    id: PromiseOrValue<BigNumberish>;
    erc20Address: PromiseOrValue<string>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AztecAssetStructOutput = [BigNumber, string, number] & {
    id: BigNumber;
    erc20Address: string;
    assetType: number;
  };
}

export interface RollupProcessorInterface extends utils.Interface {
  functions: {
    "convert(address,(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),(uint256,address,uint8),uint256,uint256,uint256)": FunctionFragment;
    "defiInteractions(uint256)": FunctionFragment;
    "getDefiInteractionBlockNumber(uint256)": FunctionFragment;
    "getDefiResult(uint256)": FunctionFragment;
    "processAsyncDefiInteraction(uint256)": FunctionFragment;
    "receiveEthFromBridge(uint256)": FunctionFragment;
    "setBridgeGasLimit(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "convert"
      | "defiInteractions"
      | "getDefiInteractionBlockNumber"
      | "getDefiResult"
      | "processAsyncDefiInteraction"
      | "receiveEthFromBridge"
      | "setBridgeGasLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convert",
    values: [
      PromiseOrValue<string>,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      AztecTypes.AztecAssetStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defiInteractions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiInteractionBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiResult",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processAsyncDefiInteraction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEthFromBridge",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeGasLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defiInteractions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiInteractionBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processAsyncDefiInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEthFromBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeGasLimit",
    data: BytesLike
  ): Result;

  events: {
    "AsyncDefiBridgeProcessed(uint256,uint256,uint256)": EventFragment;
    "DefiBridgeProcessed(uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AsyncDefiBridgeProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefiBridgeProcessed"): EventFragment;
}

export interface AsyncDefiBridgeProcessedEventObject {
  bridgeCallData: BigNumber;
  nonce: BigNumber;
  totalInputValue: BigNumber;
}
export type AsyncDefiBridgeProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AsyncDefiBridgeProcessedEventObject
>;

export type AsyncDefiBridgeProcessedEventFilter =
  TypedEventFilter<AsyncDefiBridgeProcessedEvent>;

export interface DefiBridgeProcessedEventObject {
  bridgeCallData: BigNumber;
  nonce: BigNumber;
  totalInputValue: BigNumber;
  totalOutputValueA: BigNumber;
  totalOutputValueB: BigNumber;
  result: boolean;
}
export type DefiBridgeProcessedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  DefiBridgeProcessedEventObject
>;

export type DefiBridgeProcessedEventFilter =
  TypedEventFilter<DefiBridgeProcessedEvent>;

export interface RollupProcessor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupProcessorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    convert(
      bridgeAddress: PromiseOrValue<string>,
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxInputData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defiInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        bridgeAddress: string;
        inputAssetA: AztecTypes.AztecAssetStructOutput;
        inputAssetB: AztecTypes.AztecAssetStructOutput;
        outputAssetA: AztecTypes.AztecAssetStructOutput;
        outputAssetB: AztecTypes.AztecAssetStructOutput;
        totalInputValue: BigNumber;
        interactionNonce: BigNumber;
        auxInputData: BigNumber;
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        finalised: boolean;
      }
    >;

    getDefiInteractionBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blockNumber: BigNumber }>;

    getDefiResult(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processAsyncDefiInteraction(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveEthFromBridge(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeGasLimit(
      bridgeAddress: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  convert(
    bridgeAddress: PromiseOrValue<string>,
    inputAssetA: AztecTypes.AztecAssetStruct,
    inputAssetB: AztecTypes.AztecAssetStruct,
    outputAssetA: AztecTypes.AztecAssetStruct,
    outputAssetB: AztecTypes.AztecAssetStruct,
    totalInputValue: PromiseOrValue<BigNumberish>,
    interactionNonce: PromiseOrValue<BigNumberish>,
    auxInputData: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defiInteractions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      AztecTypes.AztecAssetStructOutput,
      AztecTypes.AztecAssetStructOutput,
      AztecTypes.AztecAssetStructOutput,
      AztecTypes.AztecAssetStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      bridgeAddress: string;
      inputAssetA: AztecTypes.AztecAssetStructOutput;
      inputAssetB: AztecTypes.AztecAssetStructOutput;
      outputAssetA: AztecTypes.AztecAssetStructOutput;
      outputAssetB: AztecTypes.AztecAssetStructOutput;
      totalInputValue: BigNumber;
      interactionNonce: BigNumber;
      auxInputData: BigNumber;
      outputValueA: BigNumber;
      outputValueB: BigNumber;
      finalised: boolean;
    }
  >;

  getDefiInteractionBlockNumber(
    interactionNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefiResult(
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processAsyncDefiInteraction(
    interactionNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveEthFromBridge(
    interactionNonce: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeGasLimit(
    bridgeAddress: PromiseOrValue<string>,
    gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    convert(
      bridgeAddress: PromiseOrValue<string>,
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxInputData: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        isAsync: boolean;
      }
    >;

    defiInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        AztecTypes.AztecAssetStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        bridgeAddress: string;
        inputAssetA: AztecTypes.AztecAssetStructOutput;
        inputAssetB: AztecTypes.AztecAssetStructOutput;
        outputAssetA: AztecTypes.AztecAssetStructOutput;
        outputAssetB: AztecTypes.AztecAssetStructOutput;
        totalInputValue: BigNumber;
        interactionNonce: BigNumber;
        auxInputData: BigNumber;
        outputValueA: BigNumber;
        outputValueB: BigNumber;
        finalised: boolean;
      }
    >;

    getDefiInteractionBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiResult(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { finalised: boolean; outputValueA: BigNumber }
    >;

    processAsyncDefiInteraction(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveEthFromBridge(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeGasLimit(
      bridgeAddress: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AsyncDefiBridgeProcessed(uint256,uint256,uint256)"(
      bridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null
    ): AsyncDefiBridgeProcessedEventFilter;
    AsyncDefiBridgeProcessed(
      bridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null
    ): AsyncDefiBridgeProcessedEventFilter;

    "DefiBridgeProcessed(uint256,uint256,uint256,uint256,uint256,bool)"(
      bridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      totalOutputValueA?: null,
      totalOutputValueB?: null,
      result?: null
    ): DefiBridgeProcessedEventFilter;
    DefiBridgeProcessed(
      bridgeCallData?: PromiseOrValue<BigNumberish> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      totalInputValue?: null,
      totalOutputValueA?: null,
      totalOutputValueB?: null,
      result?: null
    ): DefiBridgeProcessedEventFilter;
  };

  estimateGas: {
    convert(
      bridgeAddress: PromiseOrValue<string>,
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxInputData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defiInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiInteractionBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiResult(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processAsyncDefiInteraction(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveEthFromBridge(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeGasLimit(
      bridgeAddress: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    convert(
      bridgeAddress: PromiseOrValue<string>,
      inputAssetA: AztecTypes.AztecAssetStruct,
      inputAssetB: AztecTypes.AztecAssetStruct,
      outputAssetA: AztecTypes.AztecAssetStruct,
      outputAssetB: AztecTypes.AztecAssetStruct,
      totalInputValue: PromiseOrValue<BigNumberish>,
      interactionNonce: PromiseOrValue<BigNumberish>,
      auxInputData: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defiInteractions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiInteractionBlockNumber(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiResult(
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processAsyncDefiInteraction(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveEthFromBridge(
      interactionNonce: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeGasLimit(
      bridgeAddress: PromiseOrValue<string>,
      gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
